// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    subConfettiChannels subConfettiChannel[]
    members       Member[]
}

model subConfettiChannel {
    id            String @id @default(cuid())
    name          String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    image         String?  @default("https://placehold.co/100x100/000000/FFFFFF")
    username      String
    createdBy     User @relation(fields: [createdById], references: [id])
    createdById   String
    members       Member[]
    posts         Post[]
    @@unique([username])
    @@index([name])
}


enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

model Member {
    id          String @id @default(cuid())
    role        MemberRole @default(GUEST)
    user        User @relation(fields: [userId], references: [id])
    userId      String
    subConfettiChannel subConfettiChannel @relation(fields: [subConfettiChannelId], references: [id])
    subConfettiChannelId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([subConfettiChannelId])
    @@index([userId])
    @@index([role])
}


enum MediaType {
    IMAGE
    VIDEO
}


model Post {
    id        String @id @default(cuid()) @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String?
    mediaType MediaType?
    mediaUrl  String?
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    subConfettiChannel subConfettiChannel @relation(fields: [subConfettiChannelId], references: [id])
    subConfettiChannelId String
    @@index([subConfettiChannelId])
    @@index([createdById])
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
